Hoisting :- a variable can be used before it has been declared.
e.g :- 
        console.log(x); // will print "undefined"
        var x = 6;
        console.log(x); // will print "6"

        Explanation: 
        1) First of all the Global execution context will be created.
        2) And then the memory allocation phase starts, During this, the variable x got a place in memory and javascript puts undefined there.
        3) And then the thread execution phase starts, During this console.log(x) statement executes and prints the value store in x, which is undefined.
        4) In the next line, there is x assigned to 6, and the undefined value of x gets replaced by 6.
        5) Again at the next console.log(x), x gets printed as 6.

In case of arrow function, function is initialized with "undefined"
i.e  var getName2 = () => {
        console.log("Hello World")
    }
    In this case, getName2 will be initialized with "undefined".

Lexical Environment :-  It is created when an execution-Environment is created. It is combination of local memory and reference to the lexical environment of parent.

Scope Chain:- This whole chain of lexical-environment is known as Scope chain.

a is the lexical-parent of b. So the lexical-environment of b will be combination of local-memory of b & lexical-environment of a.
function a(){
        function b(){

        }
}


Temporal Dead Zone :- let & const variables are hoisted but before there declaration they are inside temporal  dead zone.  Accessing a let or const before it is declared throws ReferenceError.

hoisting process: var, let, const
Initialisation process: var

*) TypeError :- Whenever there is reassignment of const variables.
*) SyntaxError :- When a const variable is not initialized at the time of declaration.
                If there is a re-declaration of let variables.
*) ReferenceError :- If let/const variables are accessed before declaration.
                If a variable is not declared but it is accessed.

*) Block :- Grouping of multiple statement inside a {} is known as Block.

*) let & const are Block-Scoped.

*) Shadowing: When a variable is declared in a certain scope having the same name defined on its outer scope and when we call the variable from the inner scope, the value assigned to the variable in the inner scope is the value that will be stored in the variable. This is known as Shadowing or Variable Shadowing.

*) Illegal Shadowing :- If we try to shadow a let variable inside a block using var, it is illegal Shadowing.It will throw SyntaxError.

*) Closure :- Function along its lexical scope forms Closure.

        Every funtion in JS has access to its outer lexical environment, i.e access to variables & function which is present in environment of its parent. When these function is executed in from other scope, not from its original scope where it is defined, it still remembers outer lexical environment where it is originally present in the code.
        
        function x(){
                var a = 7;
                function y(){
                        console.log(a);
                }
                return y;         // here function along with its lexical-environment is getting returned.
        }

        var z = x();
        console.log(z.toString());
        z();                      // will print 7

Usage of Closure :- 
i) Module Design Pattern
ii) Currying
iii) Function like once
iv) Memoize
v) Maintaining state in async World
vi) SetTimeouts
vii) Iterators


Disadvantage :-
i) OverConsumption of memory